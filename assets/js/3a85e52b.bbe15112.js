"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[439],{7223:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var o=n(7462),s=n(3366),r=(n(7294),n(3905)),a=["components"],l={sidebar_position:1,sidebar_label:"export to_xlsx"},i="export to_xlsx",c={unversionedId:"commands/export/export-to_xlsx",id:"commands/export/export-to_xlsx",isDocsHomePage:!1,title:"export to_xlsx",description:"Export i18n files into a xlsx file, created by exceljs",source:"@site/docs/commands/export/export-to_xlsx.md",sourceDirName:"commands/export",slug:"/commands/export/export-to_xlsx",permalink:"/i18n-tools/docs/commands/export/export-to_xlsx",editUrl:"https://github.com/jy95/i18n-tools/edit/master/website/docs/commands/export/export-to_xlsx.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"export to_xlsx"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/i18n-tools/docs/installation"},next:{title:"import from_xlsx",permalink:"/i18n-tools/docs/commands/import/import-from_xlsx"}},p=[{value:"Command",id:"command",children:[]},{value:"Examples",id:"examples",children:[{value:"First format of settings.json (Path)",id:"first-format-of-settingsjson-path",children:[]},{value:"Second format of settings.json (Object/Array instead of Paths)",id:"second-format-of-settingsjson-objectarray-instead-of-paths",children:[]},{value:"Third format of settings.json (Include the worksheetCustomizer)",id:"third-format-of-settingsjson-include-the-worksheetcustomizer",children:[]}]}],m={toc:p};function u(t){var e=t.components,n=(0,s.Z)(t,a);return(0,r.kt)("wrapper",(0,o.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"export-to_xlsx"},"export to_xlsx"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Export i18n files into a xlsx file, created by exceljs")),(0,r.kt)("h2",{id:"command"},"Command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Display help for export to_xlsx\nnpx @jy95/i18n-tools export to_xlsx --help\n")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"first-format-of-settingsjson-path"},"First format of settings.json (Path)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="files.json"',title:'"files.json"'},'{\n    "FR":"D:\\\\TEMP\\\\TEMP\\\\tests-for-export\\\\correct\\\\fr.json",\n    "NL":"D:\\\\TEMP\\\\TEMP\\\\tests-for-export\\\\correct\\\\nl.json",\n    "DE":"D:\\\\TEMP\\\\TEMP\\\\tests-for-export\\\\correct\\\\de.json"\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="columns.json"',title:'"columns.json"'},'[\n    {\n        "locale":"FR",\n        "label":"French translation"\n    },\n    {\n        "locale":"NL",\n        "label":"Dutch translation"\n    },\n    {\n        "locale":"DE",\n        "label":"German translation"\n    }\n]\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings1.json"',title:'"settings1.json"'},'{\n   "files":"D:\\\\TEMP\\\\TEMP\\\\tests-for-export\\\\correct\\\\files.json",\n   "columns":"D:\\\\TEMP\\\\TEMP\\\\tests-for-export\\\\correct\\\\columns.json",\n   "worksheetName":"Settings 1 - Worksheet",\n   "filename":"settings1-output",\n   "outputDir":"D:\\\\TEMP\\\\TEMP"\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'npx @jy95/i18n-tools export to_xlsx --settings "/absolutePath/to/settings1.json"\n')),(0,r.kt)("h3",{id:"second-format-of-settingsjson-objectarray-instead-of-paths"},"Second format of settings.json (Object/Array instead of Paths)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings2.json"',title:'"settings2.json"'},'{\n   "files":{\n      "FR":"D:\\\\TEMP\\\\TEMP\\\\tests-for-export\\\\correct\\\\fr.json",\n      "NL":"D:\\\\TEMP\\\\TEMP\\\\tests-for-export\\\\correct\\\\nl.json",\n      "DE":"D:\\\\TEMP\\\\TEMP\\\\tests-for-export\\\\correct\\\\de.json"\n   },\n   "columns":[\n      {\n         "locale":"FR",\n         "label":"French translation"\n      },\n      {\n         "locale":"NL",\n         "label":"Dutch translation"\n      },\n      {\n         "locale":"DE",\n         "label":"German translation"\n      }\n   ],\n   "worksheetName":"Settings 2 - Worksheet",\n   "filename":"settings2-output",\n   "outputDir":"D:\\\\TEMP\\\\TEMP"\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'npx @jy95/i18n-tools export to_xlsx --settings "/absolutePath/to/settings2.json"\n')),(0,r.kt)("h3",{id:"third-format-of-settingsjson-include-the-worksheetcustomizer"},"Third format of settings.json (Include the worksheetCustomizer)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="worksheetCustomizer-dynamic.js"',title:'"worksheetCustomizer-dynamic.js"'},"// I keep in comments the stuff needed to convert that into a TS file\n// (So I can easily update this script in the future)\n//import { Worksheet } from \"exceljs\";\n\nmodule.exports = async function(worksheet /*: Worksheet*/) {\n  // Conditionaly formatting (to better view stuff)\n  let rowCount = worksheet.rowCount;\n  let columnCount = worksheet.columnCount;\n\n  // for easiness in the future, for arbitrary number of translations\n  // As table have a least one language (starting to 'B'), pretty simple to compute last column letter\n  let lastColumnLetter = String.fromCharCode(66 + (columnCount - 2));\n\n  // domain for rules ; All the cells\n  // Ex : \"B2:D\" + rowCount + 2\" for three languages\n  let computedRef = `B2:${lastColumnLetter + rowCount + 2}`;\n\n  worksheet.addConditionalFormatting({\n    ref: computedRef,\n    rules: [\n      // cell is empty : put it in red\n      {\n        type: 'containsText',\n        operator: 'containsBlanks',\n        style: {\n          fill: {\n            type: 'pattern',\n            pattern: 'solid',\n            bgColor: { argb: 'FF5733' },\n          },\n        },\n        priority: 1,\n      },\n      // cell contains either [FR], [NL] or [DE] : put it in orange\n      {\n        type: 'containsText',\n        operator: 'containsText',\n        text: '[FR]',\n        style: {\n          fill: {\n            type: 'pattern',\n            pattern: 'solid',\n            bgColor: { argb: 'FF9633' },\n          },\n        },\n        priority: 2,\n      },\n      {\n        type: 'containsText',\n        operator: 'containsText',\n        text: '[NL]',\n        style: {\n          fill: {\n            type: 'pattern',\n            pattern: 'solid',\n            bgColor: { argb: 'FF9633' },\n          },\n        },\n        priority: 2,\n      },\n      {\n        type: 'containsText',\n        operator: 'containsText',\n        text: '[DE]',\n        style: {\n          fill: {\n            type: 'pattern',\n            pattern: 'solid',\n            bgColor: { argb: 'FF9633' },\n          },\n        },\n        priority: 2,\n      },\n    ],\n  });\n\n  return worksheet;\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings3.json"',title:'"settings3.json"'},'{\n   "files":{\n      "FR":"D:\\\\TEMP\\\\TEMP\\\\tests-for-export\\\\correct\\\\fr.json",\n      "NL":"D:\\\\TEMP\\\\TEMP\\\\tests-for-export\\\\correct\\\\nl.json",\n      "DE":"D:\\\\TEMP\\\\TEMP\\\\tests-for-export\\\\correct\\\\de.json"\n   },\n   "columns":[\n      {\n         "locale":"FR",\n         "label":"French translation"\n      },\n      {\n         "locale":"NL",\n         "label":"Dutch translation"\n      },\n      {\n         "locale":"DE",\n         "label":"German translation"\n      }\n   ],\n   "worksheetCustomizer":"D:\\\\workspace\\\\i18n-tools\\\\test\\\\fixtures\\\\export-xlsx\\\\worksheetCustomizer-dynamic.js",\n   "worksheetName":"Settings 3 - Worksheet",\n   "filename":"settings3-output",\n   "outputDir":"D:\\\\TEMP\\\\TEMP"\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'npx @jy95/i18n-tools export to_xlsx --settings "/absolutePath/to/settings3.json"\n')))}u.isMDXComponent=!0}}]);